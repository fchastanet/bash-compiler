@startuml
legend
<u><b>Legend</b></u>
Render Aggregations: true
Render Fields: true
Render Methods: true
Private Aggregations: true
end legend
namespace compiler {
    interface AnnotationProcessorInterface  {
        + Init() error
        + ParseFunction(functionStruct *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)

    }
    interface CodeCompilerInterface  {
        + Init() error
        + Compile(code string) (string, error)
        + GenerateCode(code string) (string, error)

    }
    class compileContext << (S,Aquamarine) >> {
        + Init() error
        + Compile(code string) (string, error)
        + GenerateCode(code string) (string, error)

    }
    class compiler.InsertPosition << (T, #FF7700) >>  {
    }
    class duplicatedAsNameError << (S,Aquamarine) >> {
        + Error() string

    }
    class embedAnnotationProcessor << (S,Aquamarine) >> {
        + Init() error
        + ParseFunction(_ *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)
        + RenderResource(asName string, resource string, lineNumber int) (string, error)

    }
    class functionInfoStruct << (S,Aquamarine) >> {
        + FunctionName string
        + SrcFile string
        + Inserted bool
        + InsertPosition InsertPosition
        + SourceCode string
        + SourceCodeLoaded bool
        + SourceCodeAsTemplate bool
        + AnnotationMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}

    }
    class requireAnnotation << (S,Aquamarine) >> {
    }
    class requireAnnotationProcessor << (S,Aquamarine) >> {
        + Init() error
        + ParseFunction(functionStruct *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)

    }
    class unsupportedEmbeddedResourceError << (S,Aquamarine) >> {
        + Error() string

    }
}

"compiler.CodeCompilerInterface" <|-- "implements""compiler.compileContext"
"compiler.AnnotationProcessorInterface" <|-- "implements""compiler.embedAnnotationProcessor"
"compiler.AnnotationProcessorInterface" <|-- "implements""compiler.requireAnnotationProcessor"

"compiler.compileContext""uses" o-- "compiler.AnnotationProcessorInterface"
"compiler.compileContext""uses" o-- "compiler.functionInfoStruct"
"compiler.compileContext""uses" o-- "model.CompilerConfig"
"compiler.compileContext""uses" o-- "regexp.Regexp"
"compiler.compileContext""uses" o-- "render.Context"
"compiler.embedAnnotationProcessor""uses" o-- "compiler.compileContext"
"compiler.functionInfoStruct""uses" o-- "compiler.InsertPosition"
"compiler.requireAnnotationProcessor""uses" o-- "compiler.compileContext"

namespace generator {
    class CodeGeneratorContext << (S,Aquamarine) >> {
        + GenerateCode() (string, error)

    }
    interface CodeGeneratorInterface  {
        + GenerateCode() (string, error)

    }
    interface TemplateRenderingInterface  {
        + Init(funcMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}) error
        + RenderFromTemplateName() (string, error)

    }
}

"generator.CodeGeneratorInterface" <|-- "implements""generator.CodeGeneratorContext"

"generator.CodeGeneratorContext""uses" o-- "generator.TemplateRenderingInterface"

namespace main {
    class Directory << (S,Aquamarine) >> {
        + Validate() error

    }
    class VersionFlag << (S,Aquamarine) >> {
        + Decode(_ *kong.DecodeContext) error
        + IsBool() bool
        + BeforeApply(app *kong.Kong, vars kong.Vars) error

    }
    class YamlFiles << (S,Aquamarine) >> {
        + Validate() error

    }
    class cli << (S,Aquamarine) >> {
        + YamlFiles YamlFiles
        + TargetDir Directory
        + Version VersionFlag
        + KeepIntermediateFiles bool
        + Debug bool
        + LogLevel int
        + CompilerRootDir Directory

    }
    class main.Directory << (T, #FF7700) >>  {
    }
    class main.VersionFlag << (T, #FF7700) >>  {
    }
    class main.YamlFiles << (T, #FF7700) >>  {
    }
}


"main.cli""uses" o-- "main.Directory"
"main.cli""uses" o-- "main.VersionFlag"
"main.cli""uses" o-- "main.YamlFiles"

namespace model {
    class BinaryModel << (S,Aquamarine) >> {
        + CompilerConfig CompilerConfig
        + Vars utils.Dictionary
        + BinData <font color=blue>interface</font>{}

    }
    class BinaryModelContext << (S,Aquamarine) >> {
        + TargetDir string
        + BinaryModelFilePath string
        + BinaryModelBaseName string
        + ReferenceDir string
        + KeepIntermediateFiles bool

        + Load() (*BinaryModel, error)

    }
    interface BinaryModelInterface  {
        + Load() (*BinaryModel, error)

    }
    class CompilerConfig << (S,Aquamarine) >> {
        + AnnotationsConfig utils.Dictionary
        + TargetFile string
        + RelativeRootDirBasedOnTargetDir string
        + CommandDefinitionFiles []string
        + TemplateFile string
        + TemplateDirs []string
        + FunctionsIgnoreRegexpList []string
        + SrcDirs []string
        + SrcDirsExpanded []string

    }
}

"model.BinaryModelInterface" <|-- "implements""model.BinaryModelContext"

"model.BinaryModel""uses" o-- "model.CompilerConfig"
"model.BinaryModel""uses" o-- "utils.Dictionary"
"model.CompilerConfig""uses" o-- "utils.Dictionary"

namespace render {
    class Context << (S,Aquamarine) >> {
        + TemplateDirs []string
        + Template *template.Template
        + TemplateFile string
        + TemplateName string
        + RootData <font color=blue>interface</font>{}
        + Data <font color=blue>interface</font>{}

        + Render(templateName string) (string, error)
        + RenderFromTemplateName() (string, error)
        + RenderFromTemplateContent(templateContent string) (string, error)
        + Init(funcMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}) error

    }
}

"generator.TemplateRenderingInterface" <|-- "implements""render.Context"

"render.Context""uses" o-- "template.Template"

namespace utils {
    class Dictionary << (S,Aquamarine) >> {
        + GetStringValue(key string) (string, error)
        + GetStringList(key string) ([]string, error)

    }
    class utils.Dictionary << (T, #FF7700) >>  {
    }
}



"__builtin__.[]string" #.. "alias of""main.YamlFiles"
"__builtin__.int8" #.. "alias of""compiler.InsertPosition"
"__builtin__.string" #.. "alias of""main.Directory"
"__builtin__.string" #.. "alias of""main.VersionFlag"
"utils.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "alias of""utils.Dictionary"
@enduml
