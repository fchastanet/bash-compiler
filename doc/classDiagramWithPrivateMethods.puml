@startuml
legend
<u><b>Legend</b></u>
Render Aggregations: true
Render Fields: true
Render Methods: true
Private Aggregations: true
end legend
namespace compiler {
    interface AnnotationProcessorInterface  {
        + Init() error
        + ParseFunction(functionStruct *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)

    }
    class CompileContext << (S,Aquamarine) >> {
        - templateContext *render.Context
        - functionsMap <font color=blue>map</font>[string]functionInfoStruct
        - ignoreFunctionsRegexp []*regexp.Regexp
        - config model.CompilerConfig
        - annotationProcessors []*AnnotationProcessorInterface

        - generateCode(code string) (bool, string, error)
        - functionsAnalysis(code string) error
        - renderEachFunctionAsTemplate() error
        - isNonFrameworkFunction(functionName string) bool
        - nonFrameworkFunctionRegexpCompile()
        - generateFunctionCode() (string, error)
        - insertFunctionsCode(functionNames []string, buffer *bytes.Buffer, insertPosition InsertPosition) error
        - retrieveAllFunctionsContent() (bool, error)
        - retrieveEachFunctionPath() (bool, error)
        - extractUniqueFrameworkFunctions(code string) bool
        - findFileInSrcDirs(relativeFilePath string) (string, string, bool)

        + Init() error
        + Compile(code string) (string, error)
        + GenerateCode(code string) (string, error)

    }
    class compiler.InsertPosition << (T, #FF7700) >>  {
    }
    class duplicatedAsNameError << (S,Aquamarine) >> {
        - lineNumber int
        - asName string
        - resource string

        + Error() string

    }
    class embedAnnotationProcessor << (S,Aquamarine) >> {
        - context *CompileContext
        - embedFileTemplateName string
        - embedDirTemplateName string
        - embedMap <font color=blue>map</font>[string]string

        - renderFile(asName string, resource string, fileMode os.FileMode) (string, error)
        - renderDir(asName string, resource string) (string, error)
        - renderTemplate(data <font color=blue>map</font>[string]string, templateName string) (string, error)

        + Init() error
        + ParseFunction(_ *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)
        + RenderResource(asName string, resource string, lineNumber int) (string, error)

    }
    class functionInfoStruct << (S,Aquamarine) >> {
        + FunctionName string
        + SrcFile string
        + Inserted bool
        + InsertPosition InsertPosition
        + SourceCode string
        + SourceCodeLoaded bool
        + SourceCodeAsTemplate bool
        + AnnotationMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}

        - getRequireAnnotation() (*requireAnnotation, error)

    }
    class requireAnnotation << (S,Aquamarine) >> {
        - requiredFunctions []string
        - isRequired bool
        - checkRequirementsCodeAdded bool
        - codeAddedOnRequiredFunctions bool

    }
    class requireAnnotationProcessor << (S,Aquamarine) >> {
        - context *CompileContext
        - checkRequirementsTemplateName string
        - requireTemplateName string

        - addRequireCodeToEachRequiredFunctions(functionStruct *functionInfoStruct) error
        - addRequireCode(functionStruct *functionInfoStruct) error

        + Init() error
        + ParseFunction(functionStruct *functionInfoStruct) error
        + Process() error
        + PostProcess(code string) (string, error)

    }
    class unsupportedEmbeddedResourceError << (S,Aquamarine) >> {
        - asName string
        - resource string
        - lineNumber int
        - innerError error

        + Error() string

    }
}

"services.CodeCompilerInterface" <|-- "implements""compiler.CompileContext"
"compiler.AnnotationProcessorInterface" <|-- "implements""compiler.embedAnnotationProcessor"
"compiler.AnnotationProcessorInterface" <|-- "implements""compiler.requireAnnotationProcessor"

"compiler.CompileContext""uses" o-- "compiler.AnnotationProcessorInterface"
"compiler.CompileContext""uses" o-- "compiler.functionInfoStruct"
"compiler.CompileContext""uses" o-- "model.CompilerConfig"
"compiler.CompileContext""uses" o-- "regexp.Regexp"
"compiler.CompileContext""uses" o-- "render.Context"
"compiler.embedAnnotationProcessor""uses" o-- "compiler.CompileContext"
"compiler.functionInfoStruct""uses" o-- "compiler.InsertPosition"
"compiler.requireAnnotationProcessor""uses" o-- "compiler.CompileContext"

namespace main {
    class Directory << (S,Aquamarine) >> {
        + Validate() error

    }
    class VersionFlag << (S,Aquamarine) >> {
        + Decode(_ *kong.DecodeContext) error
        + IsBool() bool
        + BeforeApply(app *kong.Kong, vars kong.Vars) error

    }
    class YamlFiles << (S,Aquamarine) >> {
        + Validate() error

    }
    class cli << (S,Aquamarine) >> {
        + YamlFiles YamlFiles
        + TargetDir Directory
        + Version VersionFlag
        + KeepIntermediateFiles bool
        + Debug bool
        + LogLevel int
        + CompilerRootDir Directory

    }
    class main.Directory << (T, #FF7700) >>  {
    }
    class main.VersionFlag << (T, #FF7700) >>  {
    }
    class main.YamlFiles << (T, #FF7700) >>  {
    }
}


"main.cli""uses" o-- "main.Directory"
"main.cli""uses" o-- "main.VersionFlag"
"main.cli""uses" o-- "main.YamlFiles"

namespace model {
    class BinaryModel << (S,Aquamarine) >> {
        + CompilerConfig CompilerConfig
        + Vars structures.Dictionary
        + BinData <font color=blue>interface</font>{}

    }
    class BinaryModelContext << (S,Aquamarine) >> {
        + TargetDir string
        + BinaryModelFilePath string
        + BinaryModelBaseName string
        + ReferenceDir string
        + KeepIntermediateFiles bool

        - setEnvVars(binaryModel *BinaryModel)
        - expandVars(binaryModel *BinaryModel)

        + Load() (*BinaryModel, error)

    }
    interface BinaryModelInterface  {
        + Load() (*BinaryModel, error)

    }
    class CompilerConfig << (S,Aquamarine) >> {
        + AnnotationsConfig structures.Dictionary
        + TargetFile string
        + RelativeRootDirBasedOnTargetDir string
        + CommandDefinitionFiles []string
        + TemplateFile string
        + TemplateDirs []string
        + FunctionsIgnoreRegexpList []string
        + SrcDirs []string
        + SrcDirsExpanded []string

    }
}

"model.BinaryModelInterface" <|-- "implements""model.BinaryModelContext"

"model.BinaryModel""uses" o-- "model.CompilerConfig"
"model.BinaryModel""uses" o-- "structures.Dictionary"
"model.CompilerConfig""uses" o-- "structures.Dictionary"

namespace render {
    class Context << (S,Aquamarine) >> {
        + TemplateDirs []string
        + Template *template.Template
        + TemplateFile string
        + TemplateName string
        + RootData <font color=blue>interface</font>{}
        + Data <font color=blue>interface</font>{}

        + Init(funcMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}) error
        + Render(templateName string) (string, error)
        + RenderFromTemplateName() (string, error)
        + RenderFromTemplateContent(templateContent string) (string, error)

    }
    interface TemplateContextInterface  {
        + Init(funcMap <font color=blue>map</font>[string]<font color=blue>interface</font>{}) error
        + Render(templateName string) (string, error)
        + RenderFromTemplateName() (string, error)
        + RenderFromTemplateContent(templateContent string) (string, error)

    }
}

"render.TemplateContextInterface" <|-- "implements""render.Context"

"render.Context""uses" o-- "template.Template"

namespace services {
    class BinaryModelServiceContext << (S,Aquamarine) >> {
        - targetDir string
        - keepIntermediateFiles bool
        - binaryModelFilePath string
        - binaryModelBaseName string
        - binaryModel *model.BinaryModel
        - binaryModelContext *model.BinaryModelContext
        - templateContext *render.Context
        - codeCompiler CodeCompilerInterface

        - renderBinaryCodeFromTemplate() (string, error)
        - renderCode() (string, error)

        + Init() error
        + Compile() error

    }
    interface CodeCompilerInterface  {
        + Init() error
        + Compile(code string) (string, error)
        + GenerateCode(code string) (string, error)

    }
    interface CodeGeneratorInterface  {
        + GenerateCode() (string, error)

    }
}


"services.BinaryModelServiceContext""uses" o-- "model.BinaryModel"
"services.BinaryModelServiceContext""uses" o-- "model.BinaryModelContext"
"services.BinaryModelServiceContext""uses" o-- "render.Context"
"services.BinaryModelServiceContext""uses" o-- "services.CodeCompilerInterface"

namespace structures {
    class Dictionary << (S,Aquamarine) >> {
        + GetStringValue(key string) (string, error)
        + GetStringList(key string) ([]string, error)

    }
    class structures.Dictionary << (T, #FF7700) >>  {
    }
}



"__builtin__.[]string" #.. "alias of""main.YamlFiles"
"__builtin__.int8" #.. "alias of""compiler.InsertPosition"
"__builtin__.string" #.. "alias of""main.Directory"
"__builtin__.string" #.. "alias of""main.VersionFlag"
"structures.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "alias of""structures.Dictionary"
@enduml
